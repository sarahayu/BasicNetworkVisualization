// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Assets/Resources/Shaders/Spline Data.cginc"


[numthreads(32,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID, uint3 GroupThreadId : SV_GroupThreadID, uint GroupId : SV_GroupID)
{
	const uint SegmentIdx = id.x;

    if (SegmentIdx >= NumPoints)
        return;

	const SplineSegmentData SegmentData = InSplineSegmentData[SegmentIdx];
    const SplineData SplineData = InSplineData[SegmentData.SplineIdx];

	// Segment
	const uint NumSamples = SegmentData.NumSamples;
	const uint BeginControlPointIdx = SegmentData.BeginControlPointIdx;
    const uint BeginOutSamplePointDataIdx = SegmentData.BeginSamplePointIdx;

    // Define Geometry matrix for this spline segment

    const float4x4 Geometry = float4x4(
        float4(InSplineControlPointData[BeginControlPointIdx    ].Position, 1), //ControlPoint0
        float4(InSplineControlPointData[BeginControlPointIdx + 1].Position, 1), //ControlPoint1
        float4(InSplineControlPointData[BeginControlPointIdx + 2].Position, 1), //ControlPoint2
        float4(InSplineControlPointData[BeginControlPointIdx + 3].Position, 1) //ControlPoint3
    );

    // Coefficients used for fast cubic spline calculation

    float4x4 Coefficients = (1.0 / 6.0) * float4x4(
                            -1, 3, -3, 1,
                            3, -6, 3, 0,
                            -3, 0, 3, 0,
                            1, 4, 1, 0);

    // Calculate the spline segment in NumSamples steps

    for (uint SampleIdx = 0; SampleIdx < NumSamples; SampleIdx++) {
        float t = float(SampleIdx) / float(NumSamples - 1); // 0 to 1
        float t2 = t * t;
        float t3 = t2 * t;

        float4 params = float4(t3, t2, t, 1);

        float colorBlendFactor = float(BeginOutSamplePointDataIdx - SplineData.BeginSamplePointIdx + SampleIdx) / (float)SplineData.NumSamples;
        SplineSamplePointData sample;
        sample.SplineIdx = SplineData.Idx;

        // Position
        sample.Position = (mul(mul(params, Coefficients), Geometry)).xyz;

        // Color
        sample.ColorRGBA = lerp(SplineData.StartColorRGBA, SplineData.EndColorRGBA, colorBlendFactor);
        if (SplineData.LinkState == LINKSTATE_ACTIVE) {
            sample.ColorRGBA.a = max(COLOR_MINIMUM_ALPHA, abs(1 - (colorBlendFactor*2)) * COLOR_NORMAL_ALPHA_FACTOR); // Arching alpha gradient src-1.0-0.0-1.0-dst
        }
        else if (SplineData.LinkState == LINKSTATE_INACTIVE) {
            sample.ColorRGBA.a = 0;
        }

        OutSamplePointData[BeginOutSamplePointDataIdx + SampleIdx] = sample;
    }
}